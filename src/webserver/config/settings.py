"""
Django settings for HealtHub backend core server project.
Generated by 'django-admin startproject' using Django 4.2.6.
"""

import os

from pathlib import Path
from typing import Union

BASE_DIR = Path(__file__).resolve().parent.parent
PROJECT_DIR = BASE_DIR.parent

SECRET_KEY = 'django-insecure-43#!)&-twtyfx$eu+o4ped#-81y%6msxn(6eyy+k6qyk$bxgk-'

DEBUG = True

ALLOWED_HOSTS = [
    '0.0.0.0'
    '127.0.0.1',
    'localhost',
    '::1',
]


# Application definition
INSTALLED_APPS = [
    # Django system contribution applications
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party applications integration
    'rest_framework',

    ####################################################
    #  Core components of the HealtHub project         #
    ####################################################

    # Core components of the HealtHub project
    'components.core.auth.apps.AuthConfig',

    # Internal system components of the HealtHub project imitating government structures
    # and working with real government services APIs as a client
    'components.common.geo.structures.apps.GovernmentStructuresConfig',

    # Internal system components of the HealtHub project for creating connections between users and grouping them
    'components.social.channel.apps.ChannelConfig',
    'components.social.verification.apps.VerificationConfig'
    'components.social.note.apps.NoteConfig',
]

COMPONENTS = {
    # Core components of the HealtHub project
    'core': [
        'auth.apps.AuthConfig'
    ],
    'common': {
        'geo': [
            'structures.apps.GovernmentStructuresConfig',
        ]
    }
}


MIDDLEWARE = [
    # Django system middlewares
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            PROJECT_DIR.joinpath("www", "templates", "webserver")
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# ASGI_APPLICATION = "config.asgi.application"
WSGI_APPLICATION = 'config.wsgi.application'


# Database
DATABASES = {
    'default': {
        'ENGINE': os.environ.get("POSTGRES_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("POSTGRES_DB", PROJECT_DIR.joinpath('storage', 'local.database.sqlite3')),
        "USER": os.environ.get("POSTGRES_USER", "user"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD", "password"),
        "HOST": os.environ.get("POSTGRES_HOST", "localhost"),
        "PORT": os.environ.get("POSTGRES_PORT", "5432")
    }
}


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'
STATIC_ROOT = PROJECT_DIR.joinpath("storage", "static")

# Media files (Image: .png, .jpg, .jpeg; Docfiles: .docx, .pdf, etc.)
MEDIA_URL = '/media/'
MEDIA_ROOT = PROJECT_DIR.joinpath("storage", "media")


# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
